Kiama

Kiama is a Scala library for language processing.  In the Kiama project we are
investigating embedding of language processing formalisms such as grammars,
parsers, rewriters and analysers into general-purpose programming languages.

This document provides a short overview of Kiama and how to build it.  See
"Licensing" for information on distributing Kiama and including it in your
programs.

IMPORTANT NOTE: Kiama is a research project, it's early days and the code is
undergoing heavy development, so many details will change.  Consult with us
before you rely on it for serious work.  We make no guarantees about the
features or performance of the Kiama library if you do choose to use it.

Anthony Sloane

Programming Languages Research Group
Department of Computing, Macquarie University
Anthony.Sloane@mq.edu.au

1. Obtaining Kiama

Kiama is hosted on the Programming Languages Research Group redmine site
at:

    http://plrg.ics.mq.edu.au:3000/
   
(Access to this site is currently restricted.  Contact us if you would
like to have access.)

The sources can be checked out of our Mercurial repository using the
following command:

    hg clone https://plrg.ics.mq.edu.au/hg/Kiama

2. Contents

The source distribution of Kiama is structured as follows:

src/
    example             Example language specifications that use Kiama
        imperative      A simple imperative language for testing
        lambda          A small lambda calculus with explicit substitutions
    parsing             Packrat parsing library                            
    rewriting           Strategy-based rewriting library
lib/                    Third-party libraries
        
Tests for each section of the library are located in the relevant
source directories.        
        
3. Requirements

To build and use Kiama you need the following software:

* Scala (http://www.scala-lang.org/)
  Tested with version 2.7.2.RC4
  
* Java (http://www.java.com)
  Tested with version 1.5 on Mac OS X 10.5.4
  
The following libraries are also needed.  Compatible versions are
distributed with the Kiama source distribution in the lib directory.

* ScalaCheck (http://code.google.com/p/scalacheck/)
  Tested with version 1.4 compiled with Scala 2.7.4.RC4
  
* ScalaTest (http://www.artima.com/scalatest/)
  Tested with version 0.9.3 compiled with Scala 2.7.2.RC2
  
* JUnit (http://www.junit.org)
  Tested with version 4.1

4. Building

Kiama is most easily built using Eclipse.  The source distribution is an
Eclipse project.  Builds have most recently been tested with Eclipse 3.4
and version 2.7.2.RC4 of the Eclipse Scala plugin.

Kiama can also be built using ant.  If you have the SCALA_HOME environment
variable set to the location of your Scala distribution, then you should notd
need to modify build.xml.  This distribution has been tested with
Scala 2.7.2.RC4. 

Alternatively, you may want to examine and modify the build.xml settings
for scala.home, scala.lib, scalacheck.lib, scalatest.lib and junit.lib as
appropriate.

Build kiama with "ant build" or just "ant" since "build" is the default.  The
build should compile the library into the "bin" directory.  To run Kiama-based
code you will need to put this directory on your CLASSPATH.

Other useful ant targets are:

clean      remove all generated files
doc        generate the API documentation into bin/doc/api
jar        make a jar of the Kiama library (in dist)
jar-src    make a jar of the Kiama library source (in dist)
scalatest  run all of the tests using the ScalaTest GUI

5. Acknowledgements

Contributors to the Kiama code are: Tony Sloane and Lennart Kats.

Kiama is currently concentrating on incorporating existing language processing
formalisms, so credit goes to the original developers of those formalisms.  See
the code for details of the sources of ideas that come from elsewhere.

Most of the build process has been adapted from that used by Rickard Nilsson
in ScalaCheck.

Some parts of this library is based on code in the Scala Library, most notably
the parsing library.

6. Licensing

Kiama is distributed under the GNU Lesser General Public License.  See the files
COPYING and COPYING.LESSER for details of these licenses.  More information can
be found at http://www.gnu.org/licenses/.

Some code in this library has been adapted from the Scala library.  This is
indicated by a note in the file header and an EPFL copyright notice.  See the
file COPYING.SCALA for the details of the Scala license.
